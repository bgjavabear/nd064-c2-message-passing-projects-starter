1) Location Service

Location Service is responsible for creating locations and retrieving them from the database.

Unlike persons that are created only once, locations are created all the time. The traffic may be huge.

That's why I chose kafka to effectively receive and store a huge volume of data.

For example:
Let's consider a conference that thousands of people are willing to attend.
The conference opens at 10PM. In worst case scenario we should expect thousands of simultaneous requests to our service.

In the future if we want to improve our searching algorithm (the algorithm we use in connection_service),
we may add additional logic to the method that is responsible for saving locations into the database.
It will increase request processing time. That's why I think that kafka is a good choice for this particular service.


Also I use REST to send messages to kafka and other test purposes.

________________________________________________________________________________________________________________________

2) Person Service is responsible for creating persons and retrieving them from the database.

Person Service uses gRPC and REST.

gRPC
I use gRPC to retrieve the list of persons, a specific person and to send a person details to insert a new person into
the database.

REST
I use REST for testing purposes to call controller methods using API.

________________________________________________________________________________________________________________________

3) Connection Service

Connection Service contains the main logic. In the future the microservice could be extended to improve the search
performance.

gRPC
gRPC is used to send to frontend all connections.
There could be a lot of them, that's why using gRPC makes sense.



